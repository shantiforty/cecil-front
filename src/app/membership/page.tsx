// src/membership/page.tsx
"use client";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Navbar from "../components/formsNavbar";

interface Member {
    Member_No: string;
    Member_Status: string;
    Last_Name: string | null;
    First_Name: string | null;
    Middle_Name: string | null;
    Suffix: string | null;
    Name: string | null;
    Sex: string | null;
    Prefix: string | null;
    CAE_No: string | null;
    Membership_ID: string; // ✅ read-only
    Member_Category: string; // ✅ required
    Band_Name: string | null;
    Pseudonym: string | null;
    Address: string | null;
    Contact_Number: string | null;
    Email_Address: string | null;
    Tin_Number: string | null;
    Primary_Contact_Number: string | null;
    Secondary_Contact_Number: string | null;
    Official_Representative: string | null;
    Office_Number: string | null;
    Office_Address: string | null;
    Landline: string | null;
    Signatory: string | null;
    Bank_Account_Info: string | null;
    Bank_Name: string | null;
    Contact_Person: string | null;
    Date_of_Membership: string | null;
    Date_of_Birth: string | null;
    Date_of_Death: string | null;
    Date_of_Membership_Termination_Resignation: string | null;
    Remarks: string | null;
    Type_of_Business_Entity: string | null;
    Remarks2: string | null;
    Related_files: string | null;
    Date_Registred_National_Library: string | null;

    // ✅ Not editable, but must be in final data
    IPI_Name_Number: string | null;
    IPI_Base_Number: string | null;
}

const API_BASE = process.env.NEXT_PUBLIC_API_BASE ?? "http://localhost:3001";

const initialFormData: Member = {
    Member_No: "",
    Member_Status: "",
    Last_Name: null,
    First_Name: null,
    Middle_Name: null,
    Suffix: null,
    Name: null,
    Sex: null,
    Prefix: null,
    CAE_No: null,
    Membership_ID: "", // generated by backend
    Member_Category: "",
    Band_Name: null,
    Pseudonym: null,
    Address: null,
    Contact_Number: null,
    Email_Address: null,
    Tin_Number: null,
    Primary_Contact_Number: null,
    Secondary_Contact_Number: null,
    Official_Representative: null,
    Office_Number: null,
    Office_Address: null,
    Landline: null,
    Signatory: null,
    Bank_Account_Info: null,
    Bank_Name: null,
    Contact_Person: null,
    Date_of_Membership: null,
    Date_of_Birth: null,
    Date_of_Death: null,
    Date_of_Membership_Termination_Resignation: null,
    Remarks: null,
    Type_of_Business_Entity: null,
    Remarks2: null,
    Related_files: null,
    Date_Registred_National_Library: null,
    IPI_Name_Number: null,
    IPI_Base_Number: null,
};

export default function AddMemberPage() {
    const router = useRouter();
    const [formData, setFormData] = useState<Member>(initialFormData);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
    ) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value === "" ? null : value,
        }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setLoading(true);
        setError(null);

        const authCookie = document.cookie
            .split("; ")
            .find((row) => row.startsWith("auth_token="))
            ?.split("=")[1];

        if (!authCookie) {
            setError("Authentication token missing. Please log in.");
            setLoading(false);
            return;
        }

        try {
            const res = await fetch(`${API_BASE}/membership`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${authCookie}`,
                },
                body: JSON.stringify(formData),
            });

            if (!res.ok) {
                let errorMsg = `Request failed with status ${res.status}`;
                try {
                    const errorData = await res.json();
                    errorMsg = errorData.error || errorData.message || errorMsg;
                } catch {}
                throw new Error(errorMsg);
            }

            const result = await res.json();
            alert(`✅ New member added successfully! ID: ${result.Membership_ID}`);
            router.push("/membersList");
        } catch (err: any) {
            console.error("Error adding member:", err);
            setError(err.message || "Failed to add new member.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <>
            <Navbar />
            <div className="container mx-auto p-6">
                <h1 className="text-3xl font-bold mb-6">Add Member</h1>
                <form onSubmit={handleSubmit} className="space-y-4">
                    {/* Hidden DB field */}
                    <input type="hidden" name="Member_No" value={formData.Member_No} />

                    {/* Membership ID (read-only) */}
                    <div className="flex flex-col">
                        <label className="font-semibold">Membership ID:</label>
                        <input
                            type="text"
                            name="Membership_ID"
                            value={formData.Membership_ID || "Will be generated on submit"}
                            disabled
                            className="p-2 border rounded bg-gray-200 text-gray-500 cursor-not-allowed"
                        />
                    </div>

                    {/* Member Status (required) */}
                    <div className="flex flex-col">
                        <label className="font-semibold">Member Status:</label>
                        <select
                            name="Member_Status"
                            value={formData.Member_Status || ""}
                            onChange={handleChange}
                            className="p-2 border rounded"
                            required
                        >
                            <option value="">-- Select Status --</option>
                            <option value="ACTIVE">ACTIVE</option>
                            <option value="NOT ACTIVE">NOT ACTIVE</option>
                            <option value="DECEASED">DECEASED</option>
                            <option value="EXPELLED & RESIGNED">EXPELLED & RESIGNED</option>
                            <option value="TERMINATED">TERMINATED</option>
                            <option value="TRANSFERRED">TRANSFERRED</option>
                            <option value="NON MEMBER">NON MEMBER</option>
                        </select>
                    </div>

                    {/* Member Category (required) */}
                    <div className="flex flex-col">
                        <label className="font-semibold">Member Category:</label>
                        <select
                            name="Member_Category"
                            value={formData.Member_Category || ""}
                            onChange={handleChange}
                            className="p-2 border rounded"
                            required
                        >
                            <option value="">-- Select Category --</option>
                            <option value="Full Composer">FULL COMPOSER</option>
                            <option value="Associate Composer">ASSOCIATE COMPOSER</option>
                            <option value="Publisher">PUBLISHER</option>
                            <option value="Copyright Owner">COPYRIGHT OWNER</option>
                            <option value="NON-MEMBER">NON-MEMBER</option>
                        </select>
                    </div>

                    {/* Render other editable fields */}
                    {Object.keys(initialFormData).map((key) => {
                        if (
                            [
                                "Member_No",
                                "Membership_ID",
                                "Member_Status",
                                "Member_Category",
                                "IPI_Name_Number", // not editable
                                "IPI_Base_Number", // not editable
                            ].includes(key)
                        )
                            return null;

                        const value = formData[key as keyof Member];
                        const formattedKey = key.replace(/_/g, " ");

                        return (
                            <div key={key} className="flex flex-col">
                                <label className="font-semibold">{formattedKey}:</label>
                                <input
                                    type="text"
                                    name={key}
                                    value={String(value || "")}
                                    onChange={handleChange}
                                    className="p-2 border rounded"
                                />
                            </div>
                        );
                    })}

                    {/* IPI fields shown but disabled */}
                    <div className="flex flex-col">
                        <label className="font-semibold">IPI Name Number:</label>
                        <input
                            type="text"
                            name="IPI_Name_Number"
                            value={formData.IPI_Name_Number || "Generated / Read-Only"}
                            disabled
                            className="p-2 border rounded bg-gray-200 text-gray-500 cursor-not-allowed"
                        />
                    </div>
                    <div className="flex flex-col">
                        <label className="font-semibold">IPI Base Number:</label>
                        <input
                            type="text"
                            name="IPI_Base_Number"
                            value={formData.IPI_Base_Number || "Generated / Read-Only"}
                            disabled
                            className="p-2 border rounded bg-gray-200 text-gray-500 cursor-not-allowed"
                        />
                    </div>

                    {/* Error display */}
                    {error && <div className="text-red-500 font-bold">{error}</div>}

                    <div className="flex justify-between mt-4">
                        <button
                            type="submit"
                            className="save-btn"
                            disabled={loading}
                        >
                            {loading ? "Adding..." : "Add Member"}
                        </button>
                    </div>
                </form>
            </div>
        </>
    );
}
